#!/bin/bash

usage() {
  cat << EOF >&2
Usage: ./test [-kdltC] [testname testname ...]
  -k keep: copy latest results fo expected expected
  -d diff: show differences between latest results and expected results
  -l list: list -lt files
  -t tree: tree files
  -C clean: remove latest results
  -S setup: instructions how to set up new tests
EOF
  exit 1
}

setup() {
  cat << EOF >&2
Setup:
	create a subdirectory (folder) in TF with the test name (tn)
	in that folder:
		create a file of inputs, one line per input, named 'i'
		create a file with tiny-c or tiny-obj code for the test 't'
			[I use a soft link to the code stored elsewhere.]
	run './test -l tn' from two folders above your sub using your test name
	run './test tn' to do the test, then ./test -l tn again. 
		that should produce the results files, r and d
		r has results (printf(...)), d has dumps (fprintf(stderr,...))
	Examine those two files. 
		If they look good run './test -k tn', keep.
		Keep copies r and d to er and dr respectively, as expected results.
	(Notice you can set up tests that are expected to fail, hence capturing dumps.)
EOF
  exit 1
}

# does one test
dotest() {
	bin/toc TF/$1/t <TF/$1/i >TF/$1/r 2>TF/$1/d
	echo TEST: $1 done
}
#does one keep
dokeep() {
	cp TF/$1/r TF/$1/er
	cp TF/$1/d TF/$1/ed
	echo KEEP: $1 done
}
#does one diff
dodiff() {
	FILE=./TF/$1/r
	if [ -f $FILE ]; then
		#echo "File $FILE exists."
		FILE=./TF/$1/er
		if [ -f $FILE ]; then
			diff TF/$1/r TF/$1/er
			#echo "File $FILE exists."
		else
		   echo "File $FILE does not exist."
		fi
	else
		echo "File $FILE does not exist."
	fi
		
}
# removes d,r from one test
doclean() {
	rm -f TF/$1/r
	rm -f TF/$1/d
}
# list files of one test
dolist() {
	ls -lt TF/$1
}
# tree files of one test
dotree() {
	tree TF/$1 --noreport
}

# does one argument: just diff, just keep, or test and diff
doit() {
#	echo ~25testing: $kt $1
	if [ $clean = "YES" ]; then
		doclean $1
	elif [ $kt = "KEEP" ]; then
		dokeep $1
	elif [ $diff = "YES" ]; then
		dodiff $1
	elif [ $clean = "YES" ]; then
		doclean $1
	elif [ $list = "YES" ]; then
		dolist $1
	elif [ $tree = "YES" ]; then
		dotree $1
	else
		dotest $1
		dodiff $1
	fi
}

#do specific tests
dospecific() {
#	echo ~36do specific:
	for tname in $@
	do
		doit $tname
	done
}
doall(){
#	echo ~42do all:
	for tname in $( ls ./TF ); do
		doit $tname
	done
}

#### MAIN ####

kt=test
diff=NO
clean=NO
list=NO
tree=NO
cmd="./bin/toc"
while getopts kdltSC o; do
  case $o in
    k) kt=KEEP;;
    d) diff=YES;;
	l) list=YES;;
	t) tree=YES;;
	C) clean=YES;;
	S) setup;;
    *) usage;;
  esac
done

shift "$((OPTIND - 1))"

if [ $# -gt 0 ]; then
    dospecific $@
else
	doall
fi
