#include pps/library.tc
#include lrblib.tc

// matched_pair.tc - tct - 5/31/19

int verbose

// feed this function a supplied date and a
// required to be >= date and get back a 1
// if OK or a 0 if not OK

new_enuf int ys, ms, ds, yr, mr, dr [
 if ys>yr return 1
 if ys<yr return 0
 // years are equal
 if ms>mr return 1
 if ms<mr return 0
 // months are equal
 if ds>=dr return 1
 return 0;
 ]

givehelp char h(0) [help h]

mainv [verbose=1;main]

main [
 // see if interpreter is recent enough
 char tcbuff(10),yrs(4),mns(2),dys(2);int yr,mn,dy,v(0)
 getproperty "pps/version.prop","date =",tcbuff,10,"..."
 strcpy yrs,tcbuff;yrs(4)=0;strcpy mns,tcbuff+5;mns(2)=0
 strcpy dys,tcbuff+8;dys(2)=0
 atoi yrs,v;yr=v(0);atoi mns,v;mn=v(0);atoi dys,v;dy=v(0)
 if new_enuf(yr,mn,dy,2018,6,29)==0 [
  printf "%ca more recent version of the interpreter is needed%c",10,10;abort
  ]
 int obctr,cursor_offset,filelen,cursor,work,works
 char buffer(7000),obracket,cbracket,obrstr(1),file(40)
 int ob_count,cb_count
 obracket=91;cbracket=93;obrstr(0)=obracket
 printf "%cmatched_pair.tc - tct - 5/31/19%c",10,10
 printf "%cfile to read? ",10;gs file
 givehelp "matched_pair"
 printf "%c",10
 filelen=readfile file,buffer,7000-1
 if filelen<=0 [printf "%cerror on file",10;abort]
 if filelen>7000-1 [printf "%cfile size too large",10;abort]
 buffer(filelen)=0
 // do bracket counts match?
 ob_count=countch buffer,buffer+filelen,obracket
 cb_count=countch buffer,buffer+filelen,cbracket
 if ob_count!=cb_count [printf "%copen and closed bracket counts differ%c",10,10;abort]
 // are there any?
 if ob_count==0 [printf "%cno %c or %c found%c",10,obracket,cbracket,10;abort]
 printf "%c%d open and %d closed brackets found%c",10,ob_count,cb_count,10
 while 1 [
  cursor_offset=index(buffer+cursor,filelen-cursor,obrstr,1)
  if cursor_offset==0 abort
// back up to beg'g of line then print to end of line
  work=cursor+cursor_offset-1
  while ((buffer(work)!=10)*(work!=0)) work=work-1
  works=work
  work=cursor+cursor_offset-1
  while buffer(work)!=10 work=work+1
  work=work-1
  pft buffer+works,buffer+work
  printf "%c",10
  obctr=1
  cursor=cursor+cursor_offset
  if verbose printf "%c%d ",10,obctr
  while (obctr) [
   cursor=cursor+1
   if buffer(cursor)==obracket [obctr=obctr+1;if verbose printf "%d ",obctr]
   if buffer(cursor)==cbracket [obctr=obctr-1;if verbose printf "%d ",obctr]
   ]
  if verbose printf "%c",10
  ]
 printf "%c",10
 ]
