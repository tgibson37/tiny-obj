/* Ed Davis - 08 Jun 2019
/* ed_davis@yahoo.com
/*
/* Tiny integer calculator
/*
/* Expressions can contain:
/*    +, -, *, /, %, ()
/*    numbers
/*    spaces
/* Follows standard C precedence
/* Also has 26 variables, named a,b, ..z
/*
/* For some reason, tiny-c doesn't like input from the clipboard,
/* so input has to be typed in.
/*
/* examples:
/*
/* 2 + 3 * 4
/* = 14
/*
/* (-1 * ((-1 * (5 * 15)) / 10))
/* = 7
/*
/* (155 + 2 + 3 - 155 - 2 - 3 + 4) * 2
/* = 8

/* library: gs
/* Read a line from the terminal into buffer as a string
/* Also handle backspace
gs char q(0) [
    int x
    x=0
    while ((q(x) = MC(2)) != 10) [
        if (q(x) == 13) break
        if (q(x) == 24) [x = 0; pl("")]
        else if (q(x) == 127) [if (x > 0) x = x - 1]
        else if (q(x) == 8) [
            if(x > 0) [
                x = x - 1;
                putchar(' ');
                putchar(8);
            ]
        ]
        else x = x + 1
    ]
    q(x) = 0
    pl ""
    return x
]

int buf_p, buf_len  /* pos in input buffer, and len
char buf(80)        /* input buffer
int the_num, sym    /* last number read, symbol read
int data(26)        /* data store for var a,..z
int data_index      /* index of current var
int binary          /* is binary operator?
int error           /* error encountered?

/* these are used as constants
int eof_t, number_t, ident_t, unknown_t
char lparen, rparen, minus

/* get the next char from input string
my_getc [
    int ch

    if (buf_p >= buf_len) return 26
    ch = buf(buf_p)
    buf_p = buf_p + 1
    return ch
]

/* need to rescan the last character
my_putb [
    buf_p = buf_p - 1
]

/* boolean: is c numeric?
digit char c [
	return ((c >= '0') * (c <= '9'))
]

/* end of transmission: ^z windows, ^d linux
eot int c [
    return ((c == 26) + (c == 4))
]

/* get the next symbol from the input
getsym [
    int ch, p
    char tmp(1)

    binary = 0

    /* skip spaces
    while (1) [
        ch = my_getc()
        if (ch != ' ') break
    ]

    /* one of our operators? set sym appropriately
    tmp(0) = ch
    if ((p = index("()=+-*/%", 8, tmp, 1)) > 0) [
        sym = ch
        if (p > 2) binary = 1
    ] else if (digit(ch)) [
        the_num = 0
        while (digit(ch)) [
            the_num = (10 * the_num) + (ch - '0')
            ch = my_getc()
        ]
        if (eot(ch) == 0) my_putb()
        sym = number_t
    ] else if (alpha(ch)) [
        /* fold upper case to lower case
        if ((ch >= 'A') * (ch <= 'Z')) ch = ch + 32
        data_index = ch - 'a'
        sym = ident_t
    ] else if (eot(ch)) [
        sym = eof_t
    ] else [
        printf("unknown char %c%c", ch, 10)
        sym = unknown_t
        error = 1
    ]
]

/* boolean: if s matches sym, get next symbol
accept int s [
    if (sym == s) [
        getsym()
        return 1
    ]
    return 0
]

/* return precendence of passed operator
prec int s [
    if (s == '=') return 1
    if ((s == '+') + (s == '-')) return 2
    if ((s == '*') + (s == '/') + (s == '%')) return 3
    return 0
]

/* process an expression
expr int p [
    int n, offset

    if (accept(number_t))   n = the_num
    else if (accept(minus)) n = -expr(4)
    else if (accept(lparen)) [
        n = expr(0)
        if (accept(rparen) == 0) [
            printf("Expecting right paren %c", 10)
            return error = 1
        ]
    ] else if (accept(ident_t)) [
        n = data(data_index)
        offset = data_index
    ] else if (sym == unknown_t) [
        return 0
    ] else [
        printf("found %d, but expecting an operand %c", sym, 10)
        return error = 1
    ]

    while (binary * (prec(sym) >= p)) [
        int op, n2, q

        op = sym
        if (op == '=') q = 0 else q = 1
        getsym()
        n2 = expr(prec(op) + q)

        if      (op == '+') n = n + n2
        else if (op == '-') n = n - n2
        else if (op == '*') n = n * n2
        else if (op == '/') n = n / n2
        else if (op == '%') n = n % n2
        else if (op == '=') n = data(offset) = n2
        else [
            printf("operator %c not found %c", op, 10)
            return error = 1
        ]
    ]
    return n
]

main [
    eof_t     = 0
    number_t  = 1
    ident_t   = 2
    unknown_t = 3
    lparen = '('    /* tiny c doesn't always like parens in expressions
    rparen = ')'    /* ditto
    minus  = '-'    /* or passing '-' instead of a variable

    while (1) [
        int n

        ps(">")
        buf_len = gs(buf)
        /* exit on empty lines
        if (buf_len == 0) break
        if (buf(0) == 'x') break   // tag

        error = buf_p = 0
        getsym()
        if (sym == eof_t) break
        n = expr(0)
        if (error == 0)
            if (sym == eof_t)
                printf("= %d%c", n, 10)
            else
                printf("cannot parse expression%c", 10)
    ]
]