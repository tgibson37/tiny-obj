#include pps/mathLib.tc
#include pps/library.tc
main [
	int x, begin, end, inc;
	begin=0; end=360; inc=15
	ps"  x   sin(x)   cos(x)   tan(x)"
	x = begin
	while(x<=end) [
		int y
		y=asin(x)
		printf "%c%4d   ", 10, x
		if(y>=1000) pdec(y)
		else if(y<= -1000) pdec y
		else if(y>0) pdec y
		else pdec y

		y=acos(x)
		ptab;pdec y

		y=atan(x)
		ptab;pdec y
		x = x+inc
	]
]

//PRESERVES orig code with debug prints, comments
// returns approximately 1000*sin(x). Uses taylor series, 4 terms
// x in degrees
//// mathLib.tc - tag - 1/10/19
//// lrb mods - CAST rule for signs
//asin int x [
////            int dbg;dbg=0
////            if(dbg)[pl"      arg mod folded:";pn x]
//    int sign; sign=1
//    x = x%360
////            if(dbg)pn x;
//    if(x>180)sign=-1
//    if((x>=90)*(x<=180)) x=180-x
////            if(dbg)pn x
////            if(dbg)pl"      x2..x7";
//    else
//    if((x>=180)*(x<=270)) x=x-180
//    else
//    if((x>=270)*(x<=360)) x=360-x
//    if(x>45) return sign*acos(90-x)  // for better convergence
//    x = x*1745/100  // convert to radians
//    int x2,x3,x5,x7
//    x2 = (x*x+500)/1000     // for rounding 500/1000 = .5
////            if(dbg)pn x2
//    x3 = (x2*x+500)/1000
////            if(dbg)pn x3
//    x5 = (x3*x2+500)/1000
////            if(dbg)pn x5
//    x7 = (x5*x2+500)/1000
////            if(dbg)pn x7
//    return sign*(x - x3/6 + x5/120 - x7/5040)
//]
//acos int x [
////            int dbg;dbg=0
////            if(dbg)[pl"      arg mod folded:";pn x]
//    int sign; sign=1
//    x = x%360
////            if(dbg)pn x
//    if((x>90)*(x<270))sign=-1
//    if((x>=90)*(x<=180)) x=180-x
////            if(dbg)pn x
////            if(dbg)pl"      x2..x7";
//    else
//    if((x>=180)*(x<=270)) x=x-180
//    else
//    if((x>=270)*(x<=360)) x=360-x
////            if(dbg)pn x
//    if(x>45) return sign*asin(90-x)  // for better convergence
//    x = x*1745/100
////            if(dbg)[pl"radians x2..8";pn x]
//    int x2,x4,x6,x8
//    x2 = (x*x+500)/1000
////            if(dbg)pn x2     // 1097 / 2        548
//    x4 = (x2*x2+500)/1000
////            if(dbg)pn x4     // 1203 / 24        50
//    x6 = (x4*x2+500)/1000
////            if(dbg)pn x6     // 1319 / 720        1
//    x8 = (x6*x2+500)/1000
////            if(dbg)pn x8     // 1446 / 40320      0
//    return sign*(1000-x2/2+x4/24-x6/720+x8/40320)
//]
//atan int x[
//    int y; 
//    y=acos(x)
//    if(y==0)return 999999999
//    return asin(x)*1000/y
//]
